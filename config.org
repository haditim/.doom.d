* How to use
This file uses [[https://github.com/doomemacs/doomemacs/tree/master/modules/config/literate][doom literate]] module to set configurations as an ~org-mode~ file.
To use:
- Make sure =:config -> literate= is enabled in ~init.el~ (if you use my whole
  repo, this is already included)
- Content of this file will be tangled to ~config.el~ and ~packages.el~ upon
  save
- Run =doom/reload= to see the changes

  Following lines are for the tangled ~config.el~ and ~packages.el~:
#+begin_src emacs-lisp :tangle config.el :tangle packages.el
;; DO NOT CHANGE
;; This file is automatically generated
;; To modify configs, take a look at `config.org`
#+end_src


* General keybinds
** Jump to parenthesis with tab
#+begin_src emacs-lisp
(map! :n [tab] 'evil-jump-item)
#+end_src

** Expand region
#+begin_src emacs-lisp
(map! :leader
      (:desc "Expand region"  "v" #'er/expand-region))
#+end_src

** Rename buffer
#+begin_src emacs-lisp
(map! :leader
      (:prefix "b"
       :desc "Rename the buffer" "R" #'rename-buffer))
#+end_src

** Debugger
#+begin_src emacs-lisp
(map! :leader
      (:prefix "o"
       :desc "Debugger start last" "l" #'+debugger/start-last
       :desc "Debugger quit" "q" #'+debugger/quit))
#+end_src

** Drag text up/down
#+begin_src emacs-lisp
(map!
 :n "M-p" 'drag-stuff-up
 :n "M-n" 'drag-stuff-down)
#+end_src

** Stop compilation
#+begin_src emacs-lisp
(map! :leader
      (:prefix "c"
       :desc "Kill compilation" "K" #'kill-compilation))
#+end_src

** Toggle ligatures in current buffer
#+begin_src emacs-lisp
(map! :leader
      (:prefix "t"
       :desc "ligatures (composition)" "L" #'auto-composition-mode))
#+end_src

** Toggle =rainbow-delimiters-mode=
#+begin_src emacs-lisp
(map! :leader
      (:prefix "t"
       :desc "rainbow delimiters" "R" 'rainbow-delimiters-mode))
#+end_src

** Hydra for window interactions
Adds "SPC" to evil window map. So one can do =C-w SPC= or ="SPC w SPC"= to open this hydra and q to close it.
#+begin_src emacs-lisp
(map! :map evil-window-map
      "SPC" #'+hydra/window-nav/body)
#+end_src

* Look and feel
** Start fullscreen
#+begin_src emacs-lisp
(add-to-list 'initial-frame-alist '(fullscreen . maximized))
#+end_src

** Don't ask to quit
#+begin_src emacs-lisp
(setq confirm-kill-emacs nil)
#+end_src

** Modeline adjustments
#+begin_src emacs-lisp
(setq doom-modeline-major-mode-icon t)
#+end_src

** Relative line numbers
#+begin_src emacs-lisp
(setq
 display-line-numbers-type 'relative)
#+end_src

** Themes
*** Switch themes between light and dark
#+begin_src emacs-lisp
(defun my/light-theme ()
  (interactive)
  (progn
    (setq doom-theme 'modus-operandi)
    (custom-reset-faces
     '(default ((t (:background))))
     '(org-block ((t (:background)))))
    (consult-theme 'modus-operandi)))

(defun my/dark-theme ()
  (interactive)
  (progn
    (setq doom-theme 'doom-molokai)
    (custom-set-faces
     '(default ((t (:background "gray4"))))
     '(org-block ((t (:background "gray2")))))
    (consult-theme 'doom-molokai)))
#+end_src
*** Dark theme as default
#+begin_src emacs-lisp
(my/dark-theme)
#+end_src

** Set relative line numbers
#+begin_src emacs-lisp
(setq display-line-numbers-type 'relative)
#+end_src

** Treemacs
*** Fix icons problem and always follow opened file
#+begin_src emacs-lisp
(doom-themes-treemacs-config)
(after! treemacs
  (treemacs-load-theme "doom-colors")
  (setq treemacs-follow-mode t))
#+end_src

** Font
#+begin_src emacs-lisp
(setq my-font
  (cl-find-if #'doom-font-exists-p
    '("Hack FC Ligatured"
      "Dejavu Sans Code"
      "Dejavu Sans Mono")))

(setq doom-font (font-spec :family my-font :size 15)
  doom-big-font (font-spec :family my-font :size 20))
#+end_src

** Aggressive indentation
*** Package
#+begin_src emacs-lisp :tangle packages.el
(package! aggressive-indent)
#+end_src
*** Setup
#+begin_src emacs-lisp
(setq global-aggressive-indent-mode 1)
#+end_src
** Horizonatal scroll with mouse wheel or trackpad
#+begin_src emacs-lisp
(setq mouse-wheel-tilt-scroll t)
#+end_src

** Better scrolling (emacs 29+)
#+begin_src emacs-lisp
(when EMACS29+
  (pixel-scroll-precision-mode 1))
#+end_src

** Simpler splash ASCII
#+begin_src emacs-lisp
(defun doom-dashboard-draw-ascii-banner-fn ()
  (let* ((banner
          '(",---.,-.-.,---.,---.,---."
            "|---'| | |,---||    `---."
            "`---'` ' '`---^`---'`---'"))
         (longest-line (apply #'max (mapcar #'length banner))))
    (put-text-property
     (point)
     (dolist (line banner (point))
       (insert (+doom-dashboard--center
                +doom-dashboard--width
                (concat
                 line (make-string (max 0 (- longest-line (length line)))
                                   32)))
               "\n"))
     'face 'doom-dashboard-banner)))
#+end_src

** Mouse interactions
*** Enable mouse mode in terminal (and enable system clipboard)
#+begin_src emacs-lisp
(setq xterm-mouse-mode t
      select-enable-clipboard t)
#+end_src

*** Set =C-middle click= to multi-cursor editing (evil)
#+begin_src emacs-lisp
(defun my/toggle-cursor-on-click (event)
  (interactive "e")
  (evil-mc-mode)
  (evil-mc-toggle-cursor-on-click event))
(map! "C-<down-mouse-2>" nil)
(map! "C-<mouse-2>" #'my/toggle-cursor-on-click)
#+end_src

* Programming languages

** Global settings
*** lsp always show breadcrumb
#+begin_src emacs-lisp
(setq lsp-headerline-breadcrumb-enable t)
#+end_src

*** Enable eldoc-box by default when eglot loads
#+begin_src emacs-lisp
(add-hook 'eglot--managed-mode-hook #'eldoc-box-hover-mode t)
#+end_src

*** Global tree-sitter mode
#+begin_src emacs-lisp
(global-tree-sitter-mode)
#+end_src

** Python
*** Keybinds
#+begin_src emacs-lisp
(map! :after python
      :map python-mode-map
      :localleader
      (:prefix ("d" . "dependency management")
        :desc "Poetry dispatch" "p" #'poetry))
#+end_src
*** Packages
#+begin_src emacs-lisp :tangle packages.el
(package! pip-requirements)
(package! python-pytest)
(package! live-py-mode)
(package! py-yapf)
#+end_src
*** dap debugger
#+begin_src emacs-lisp
(setq dap-python-debugger 'debugpy)
#+end_src
*** Disable =poetry-tracking-mode=
#+begin_src emacs-lisp
(after! python
  (remove-hook! 'python-mode-hook #'poetry-tracking-mode))
#+end_src

*** Local LSP server settings
#+begin_src emacs-lisp
(setq lsp-pylsp-plugins-pylint-enabled t)
#+end_src

*** Remote LSP server (using =python-lsp-server=)
#+begin_src emacs-lisp
(after! lsp-mode
        (lsp-register-client
            (make-lsp-client :new-connection (lsp-tramp-connection "pylsp")
                             :major-modes '(python-mode)
                             :remote? t
                             :server-id 'pyls-remote)))
#+end_src

** C
*** Keybinds
**** Find other file (switch between .c and .h)
#+begin_src emacs-lisp
(map! :leader
      (:prefix "f"
       :desc "Find other file (.c, .h)" "o" #'ff-find-other-file))
#+end_src
*** Linux kernel indentation
#+begin_src emacs-lisp
(setq c-default-style "linux"
      c-basic-offset 4)
#+end_src

*** Automatic indentation
#+begin_src emacs-lisp
(add-hook 'c-mode-common-hook #'(lambda () (c-toggle-auto-state 1)))
#+end_src

** Vala

*** Packages
#+begin_src emacs-lisp :tangle packages.el
(package! vala-mode)
#+end_src

* Human languages

** Enable Persian/Arabic and other RTL languages in org-mode
#+begin_src emacs-lisp
(add-hook 'org-mode-hook #'+bidi-mode)
#+end_src

** A tolerable font for Persian/Arabic
#+begin_src emacs-lisp
(add-hook '+bidi-mode-hook
          (lambda () (set-fontset-font t 'arabic (font-spec :family "Droid Naskh Shift Alt"))))
#+end_src

** Translations

*** Lingva
This is a privacy-based google-translate middleware.
#+begin_src emacs-lisp :tangle packages.el
(package! lingva)
#+end_src

*** Dict.cc translation
#+begin_src emacs-lisp :tangle packages.el
(package! dictcc)
#+end_src

* DevOps
** Kubernetes
#+begin_src emacs-lisp :tangle packages.el
(package! kubernetes)
#+end_src

*** Keybinds
#+begin_src emacs-lisp
(map! :leader
      (:prefix "o"
        ("k" #'kubernetes-dispatch :desc "Kubernetes")))
#+end_src

* Compilation
** Always scroll
#+begin_src emacs-lisp
(after! compile
        (setq compilation-scroll-output t))
#+end_src


* Org-mode
#+begin_src emacs-lisp
(setq org-directory "~/Documents/ORG/")
(add-hook! 'org-mode-hook 'org-download-enable)
#+end_src


** Packages
#+begin_src emacs-lisp :tangle packages.el
(package! ob-http)              ;; org-babel http for REST requests
(package! eldoc-box)
(package! org-download)
(package! org-modern)
(package! denote)
#+end_src

** org-modern-mode global
#+begin_src emacs-lisp
(global-org-modern-mode)
#+end_src

** denote
The package [[https://github.com/protesilaos/denote][denote]] is a nice note-taking package. I use it here to keep my
notes in one place with relevant folders. Keybinds are defined in [[*Denote keybinds][denote keybinds]].

*** Keybinds
Look at [[*Denote][denote section]] for more info.
#+begin_src emacs-lisp
(map! :leader
      (:prefix "n"
        (:prefix ("D" . "denote")
         ("N" #'denote-subdirectory-new :desc "new note in new subdirectory")
         ("n" #'denote-subdirectory :desc "new note in existing subdirecory")
         ("D" #'denote-subdirectory-with-date :desc "new note in existing subdirecory with date")
         ("d" #'denote :desc "new note in main notes dir")
         ("b" #'denote-browse :desc "browse notes in denote directory"))))
#+end_src
*** Custom function
A small func to create a subdir for you in your notes directory.
#+begin_src emacs-lisp
(require 'f)
(require 'denote)

(defun denote-subdirectory-new ()
  "Creates sub directory in the `denote-directory' for better organization"
  (interactive)
  (if-let (sd (read-string "Subdir name: " nil))
      (let ((subdir (file-name-concat denote-directory sd)))
        (if (f-dir? subdir)
           (message (concat "directory " subdir " already exists!"))
           (make-directory subdir))
        (denote-subdirectory subdir (denote--title-prompt) (denote--keywords-prompt)))))

(defun denote-browse ()
  "Browse files from `denote-directory'"
  (interactive)
  (unless (bound-and-true-p denote-directory)
    (message "denote-directoy not defined"))
  (doom-project-browse (concat denote-directory "/")))

(defun denote-subdirectory-with-date ()
  "Like `denote-subdirectory' but ask for date of the note."
  (interactive)
  (let ((denote-prompts '(title keywords date subdirectory)))
    (call-interactively #'denote)))
#+end_src

*** Other settings
#+begin_src emacs-lisp
(setq denote-directory "~/Nextcloud/Notes")
(setq denote-known-keywords nil)
#+end_src

* Dirvish
A replacement for dired. Unpin the version forced but Doom Emacs as per [[https://github.com/alexluigit/dirvish/blob/main/CUSTOMIZING.org#using-dired-module-with-dirvish-flag][documentation]].
** Keybinds
*** Dispatch
#+begin_src emacs-lisp
(map!
 :map dirvish-mode-map
  :localleader
    ("d" #'dirvish-dispatch))
#+end_src
#+begin_src emacs-lisp :tangle no
(unpin! dirvish)
#+end_src

* Avy
Thanks to Karthink for his [[https://github.com/karthink/.emacs.d/issues/2][answer]] and his [[https://karthinks.com/software/avy-can-do-anything/][write-up]] on avy.
#+begin_src emacs-lisp
(setq avy-all-windows t)

#+end_src

** Keybinds
#+begin_src emacs-lisp
(map! :leader
      (:prefix-map ("y" . "yank")
       :desc "copy lines" "l" #'avy-copy-line
       :desc "copy region" "r" #'avy-copy-region))
#+end_src

* Projects
** Set projects path
#+begin_src emacs-lisp
(setq projectile-project-search-path '("~/Projects/Code"))
#+end_src

* Misc packages
#+begin_src emacs-lisp :tangle packages.el
(package! dockerfile-mode)
(package! nginx-mode)
(package! android-mode)
(package! subed
  :recipe (:host github :repo "sachac/subed"
           :files ("subed/*.el")))
(package! lorem-ipsum)
#+end_src

** Subed-mode
*** restore keybinds
This assures ~evil~ does not conflict with [[https://github.com/sachac/subed][subed]] keybinds.
#+begin_src emacs-lisp
(map! :map (subed-mode subed-srt-mode-map)
  :n "M-p" #'subed-backward-subtitle-text
  :n "M-n" #'subed-forward-subtitle-text
  :leader                           ; Use leader key from now on
  :desc "MPV play/pause" "<RET>" #'subed-mpv-toggle-pause)
#+end_src

* Misc config (not very important and can be removed)
** Add Startpage and Qwant to search engines
#+begin_src emacs-lisp
(add-to-list '+lookup-provider-url-alist '("Startpage" "https://www.startpage.com/do/dsearch?query=%s"))
(add-to-list '+lookup-provider-url-alist '("Qwant" "https://qwant.com/?q=%s"))
#+end_src


** Ansi colors in buffer
#+begin_src emacs-lisp
(defun display-ansi-colors ()
  (interactive)
  (ansi-color-apply-on-region (point-min) (point-max)))
#+end_src

** undo-tree everywhere
#+begin_src emacs-lisp
(setq global-undo-tree-mode t)
#+end_src

* Not used any more
** Keycast
*** Keycast with doom modeline
#+begin_src emacs-lisp :tangle no
(after! keycast
  (define-minor-mode keycast-mode
    "Show current command and its key binding in the mode line."
    :global t
    (if keycast-mode
        (progn
                (add-hook 'pre-command-hook 'keycast--update t)
                (add-to-list 'global-mode-string '("" mode-line-keycast)))
      (progn
         (remove-hook 'pre-command-hook 'keycast-mode-line-update)
         (setq global-mode-string (delete '("" mode-line-keycast " ") global-mode-string)))))
  (setq keycast-substitute-alist '((evil-next-line nil nil)
                                   (evil-previous-line nil nil)
                                   (evil-forward-char nil nil)
                                   (evil-backward-char nil nil)
                                   (ivy-done nil nil)
                                   (self-insert-command nil nil))))
(add-to-list 'global-mode-string '("" mode-line-keycast))
#+end_src

*** Toggle keycast-mode
#+begin_src emacs-lisp :tangle no
 (map! :leader
       (:prefix "t"
        :desc "keycast" "k" #'keycast-mode))
#+end_src

** EAF (Still too slow for my taste)
#+begin_src emacs-lisp :tangle no

 (add-load-path! "~/.doomemacs.d/site-lisp/emacs-application-framework/")
 (use-package! eaf
   :config
         (require 'eaf)
         (require 'eaf-browser)
         (require 'eaf-pdf-viewer)
         (require 'eaf-org-previewer)
         (require 'eaf-terminal)
         (require 'eaf-video-player)
         (require 'eaf-markdown-previewer)
         (require 'eaf-image-viewer)
         (setq browse-url-browser-function 'eaf-open-browser)
         (setq eaf-browser-default-search-engine "startpage")
         (setq eaf-browse-blank-page-url "https://startpage.com")
         (setq eaf-browser-enable-adblocker "true")
         (setq eaf-browser-continue-where-left-off t)
         (setq eaf-browser-default-zoom "3")
         (when doom-big-font-mode)
         (setq eaf-browser-default-zoom 1.5)
         (setq eaf-mindmap-dark-mode "follow")
         (setq eaf-browser-dark-mode "force")
         (setq eaf-terminal-dark-mode "force")
         (setq eaf-pdf-dark-mode "force"))
#+end_src

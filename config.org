* How to use
This file uses [[https://github.com/doomemacs/doomemacs/tree/master/modules/config/literate][doom literate]] module to set configurations as an ~org-mode~ file.
To use:
- Make sure =:config -> literate= is enabled in ~init.el~ (if you use my whole
  repo, this is already included)
- Content of this file will be tangled to ~config.el~ and ~packages.el~ upon
  save
- Run =doom/reload= to see the changes

  Following lines are for the tangled ~config.el~ and ~packages.el~:
#+begin_src emacs-lisp :tangle config.el :tangle packages.el
;; DO NOT CHANGE
;; This file is automatically generated
;; To modify configs, take a look at `config.org`
#+end_src

Note: In principle, you don't need ~packages.el~ and ~config.el~ from this repo,
but I keep them checked out for initial start.


* Keybinds
** Jump to paranthesis with tab
#+begin_src emacs-lisp
(map! :n [tab] 'evil-jump-item)
#+end_src

** Expand region
#+begin_src emacs-lisp
(map! :leader
      (:desc "Expand region"  "v" #'er/expand-region))
#+end_src

** Rename buffer
#+begin_src emacs-lisp
(map! :leader
      (:prefix "b"
       :desc "Rename the buffer" "R" #'rename-buffer))
#+end_src

** Debugger
#+begin_src emacs-lisp
(map! :leader
      (:prefix "o"
       :desc "Debugger start last" "l" #'+debugger/start-last
       :desc "Debugger quit" "q" #'+debugger/quit))
#+end_src

** Drag text up/down
#+begin_src emacs-lisp
(map!
 :n "M-p" 'drag-stuff-up
 :n "M-n" 'drag-stuff-down)
#+end_src

** Stop compilation
#+begin_src emacs-lisp
(map! :leader
      (:prefix "c"
       :desc "Kill compilation" "K" #'kill-compilation))
#+end_src

** subed-mode restore keybinds
This assures ~evil~ does not conflict with [[https://github.com/sachac/subed][subed]] keybinds.
#+begin_src emacs-lisp
(map! :map (subed-mode subed-srt-mode-map)
  :n "M-p" #'subed-backward-subtitle-text
  :n "M-n" #'subed-forward-subtitle-text
  :leader                           ; Use leader key from now on
  :desc "MPV play/pause" "<RET>" #'subed-mpv-toggle-pause)
#+end_src

** Find other file (switch between .c and .h)
#+begin_src emacs-lisp
(map! :leader
      (:prefix "f"
       :desc "Find other file (.c, .h)" "o" #'ff-find-other-file))
#+end_src

** denote keybinds
Look at [[*Denote][denote section]] for more info.
#+begin_src emacs-lisp
(map! :leader
      (:prefix "n"
        (:prefix ("D" . "denote/mynote")
         ("b" #'+mynote/browse-notes)
         ("N" #'+mynote/new-subdir)
         ("n" #'+mynote/new-in-subdir)
         ("d" #'+mynote/new-in-subdir-with-date
          (:prefix ("D" . "denote")
            ("n" #'denote)
            ("d" #'denote-date))))))
#+end_src

* Look and feel
** Start fullscreen
#+begin_src emacs-lisp
(toggle-frame-fullscreen)
#+end_src

** Don't ask to quit
#+begin_src emacs-lisp
(setq confirm-kill-emacs nil)
#+end_src

** Modeline adjustments
#+begin_src emacs-lisp
(setq doom-modeline-major-mode-icon t)
#+end_src

** doom-molokai for the theme
#+begin_src emacs-lisp
(setq
 doom-theme 'doom-molokai
 display-line-numbers-type 'relative)
#+end_src

** Treemacs
*** Fix icons problem
#+begin_src emacs-lisp
(doom-themes-treemacs-config)
(after! treemacs
  (treemacs-load-theme "doom-colors")
#+end_src

*** Always follow open files
#+begin_src emacs-lisp
  (setq treemacs-follow-mode t))
#+end_src

** Font
#+begin_src emacs-lisp
(setq my-font
      (cl-find-if #'doom-font-exists-p
                    '("DejaVu Sans Code"
                      "Dejavu Sans Mono")))
(setq doom-font (font-spec :family my-font :size 15)
      doom-big-font (font-spec :family my-font :size 21))
#+end_src

* Programming languages

** Global settings
*** lsp always show breadcrumb
#+begin_src emacs-lisp
(setq lsp-headerline-breadcrumb-enable t)
#+end_src

*** Enable eldoc-box by default when eglot loads
#+begin_src emacs-lisp
(add-hook 'eglot--managed-mode-hook #'eldoc-box-hover-mode t)

#+end_src

** Python
*** Packages
#+begin_src emacs-lisp :tangle packages.el
(package! py-autopep8)
(package! blacken)
(package! pip-requirements)
(package! python-pytest)
(package! python-pylint)
(package! live-py-mode)
(package! py-yapf)
#+end_src

** C
*** Linux kernel indentation
#+begin_src emacs-lisp
(setq c-default-style "linux"
      c-basic-offset 4)
#+end_src

*** Automatic indentation
#+begin_src emacs-lisp
(add-hook 'c-mode-common-hook #'(lambda () (c-toggle-auto-state 1)))
#+end_src

** Vala

*** Packages
#+begin_src emacs-lisp :tangle packages.el
(package! vala-mode)
#+end_src

* Human languages
** Enable Persian/Arabic and other RTL languages in org-mode
#+begin_src emacs-lisp
(add-hook 'org-mode-hook #'+bidi-mode)
#+end_src

** A tolerable font for Persian/Arabic
#+begin_src emacs-lisp
(add-hook '+bidi-mode-hook
          (lambda () (set-fontset-font t 'arabic (font-spec :family "Droid Naskh Shift Alt"))))
#+end_src

* Compilation
** Always scroll
#+begin_src emacs-lisp
(after! compile
        (setq compilation-scroll-output t))
#+end_src


* Org-mode
#+begin_src emacs-lisp
(setq org-directory "~/Documents/ORG/")
(add-hook! 'org-mode-hook 'org-download-enable)
#+end_src


** Packages
#+begin_src emacs-lisp :tangle packages.el
(package! ob-http)              ;; org-babel http for REST requests
(package! eldoc-box)
(package! org-download)
(package! org-modern)
(package! denote
  :recipe (:host nil :repo "https://git.sr.ht/~protesilaos/denote"))
#+end_src

** org-modern-mode global
#+begin_src emacs-lisp
(global-org-modern-mode)
#+end_src

** denote
The package [[https://github.com/protesilaos/denote][denote]] is a nice note-taking package. I use it here to keep my
notes in one place with relevant folders. Keybinds are defined in [[*Denote keybinds][denote keybinds]].
*** Imports
#+begin_src emacs-lisp
(require 'f)
(require 'denote)
(require 'denote-dired)
#+end_src

*** denote custom functions
Call these instead of default ~denote~ to order notes in subdirectories.
#+begin_src emacs-lisp
(defun mynote--get-note-subdirs ()
  "Lists only names of subdirectories"
  (let ((subdir-names)
        (subdirs (f-directories denote-directory)))
    (dolist (item subdirs)
      (add-to-list 'subdir-names (file-name-nondirectory item)))
    subdir-names))

(defun mynote--set-denote-keywords ()
  "Sets `denote-keywords' based on subfolder structure"
  (setq denote-known-keywords (mynote--get-note-subdirs)))

(defun +mynote/new-subdir ()
  "Creates sub directory in the `denote-directory' for better organization"
  (interactive)
  (if-let (keyword (read-string "Subdir name: " nil))
      (let ((subdir (file-name-concat denote-directory keyword)))
        (let ((loc-file (file-name-concat subdir ".dir-locals.el")))
          (if (f-dir? subdir)
              (message (concat "directory " subdir " already exists!"))
            (progn
              (make-directory subdir)
              (if (f-file? loc-file)
                  (message (concat "file " loc-file " already exists!"))
                (progn
                  (make-empty-file loc-file)
                  (write-region "((nil . ((denote-directory . local))))" nil loc-file)))))
          (mynote--set-denote-keywords)))))

(defun +mynote/new-in-subdir ()
  "Call this function instead of `denote' for notes in a subfolder"
  (interactive)
  (let* ((keyword (denote--keywords-prompt))
         (denote-directory (file-name-concat denote-directory keyword)))
    (denote
     (denote--title-prompt)
     keyword)))

(defun +mynote/new-in-subdir-with-date ()
  "Call this function instead of `denote-date' for notes in a subfolder with date"
  (interactive)
  (let* ((keyword (denote--keywords-prompt))
         (denote-directory (file-name-concat denote-directory keyword)))
    (denote-date
     (denote--date-prompt)
     (denote--title-prompt)
     keyword)))

(defun +mynote/browse-notes ()
  "Browse files from `denote-directory'"
  (interactive)
  (unless (bound-and-true-p denote-directory)
    (message "denote-directoy not defined"))
  (doom-project-browse (concat denote-directory "/")))

;; make default folder to avoid errors
(when (not (f-dir? denote-directory))
  (make-directory denote-directory))
#+end_src
*** Other settings
#+begin_src emacs-lisp
(setq denote-directory "~/Documents/notes")
(mynote--set-denote-keywords)
(add-hook 'dired-mode-hook #'denote-dired-mode-in-directories)
#+end_src

* Dired
** Packages
#+begin_src emacs-lisp :tangle packages.el
(package! dired-du)
#+end_src

** Hide files toggle on M-h
#+begin_src emacs-lisp
(setq my-dired-ls-switches "-alh --ignore=.* --ignore=\\#* --ignore=*~")

(setq my-dired-switch 1)
#+end_src

** Don't ask questions about size
#+begin_src emacs-lisp
(setq large-file-warning-threshold nil)

(add-hook 'dired-mode-hook
          (lambda ()
            "Set the right mode for new dired buffers."
            (when (= my-dired-switch 1)
              (dired-sort-other my-dired-ls-switches))))

(add-hook 'dired-mode-hook
          (lambda ()
            (dired-hide-details-mode)  ; enable with "("
            (define-key dired-mode-map (kbd "M-h")
              (lambda ()
                "Toggle between hide and show."
                (interactive)
                (setq my-dired-switch (- my-dired-switch))
                (if (= my-dired-switch 1)
                    (dired-sort-other my-dired-ls-switches)
                  (dired-sort-other "-alh"))))))
#+end_src

* Projects
** Set projects path
#+begin_src emacs-lisp
(setq projectile-project-search-path '("~/Projects/Code"))
#+end_src

* Misc Packages
#+begin_src emacs-lisp :tangle packages.el
(package! dockerfile-mode)
(package! nginx-mode)
(package! android-mode)
(package! subed
  :recipe (:host github :repo "sachac/subed"
           :files ("subed/*.el")))
(package! lorem-ipsum)
#+end_src

* Misc (not very important and can be removed)
** Add Startpage and Qwant to search engines
#+begin_src emacs-lisp
(add-to-list '+lookup-provider-url-alist '("Startpage" "https://www.startpage.com/do/dsearch?query=%s"))
(add-to-list '+lookup-provider-url-alist '("Qwant" "https://qwant.com/?q=%s"))
#+end_src


** Ansi colors in buffer
#+begin_src emacs-lisp
(defun display-ansi-colors ()
  (interactive)
  (ansi-color-apply-on-region (point-min) (point-max)))
#+end_src

** undo-tree everywhere
#+begin_src emacs-lisp
(setq global-undo-tree-mode t)
#+end_src

* Not used any more
** Keycast
*** Keycast with doom modeline
#+begin_src emacs-lisp :tangle no
(after! keycast
  (define-minor-mode keycast-mode
    "Show current command and its key binding in the mode line."
    :global t
    (if keycast-mode
        (progn
                (add-hook 'pre-command-hook 'keycast--update t)
                (add-to-list 'global-mode-string '("" mode-line-keycast)))
      (progn
         (remove-hook 'pre-command-hook 'keycast-mode-line-update)
         (setq global-mode-string (delete '("" mode-line-keycast " ") global-mode-string)))))
  (setq keycast-substitute-alist '((evil-next-line nil nil)
                                   (evil-previous-line nil nil)
                                   (evil-forward-char nil nil)
                                   (evil-backward-char nil nil)
                                   (ivy-done nil nil)
                                   (self-insert-command nil nil))))
(add-to-list 'global-mode-string '("" mode-line-keycast))
#+end_src

*** Toggle keycast-mode
#+begin_src emacs-lisp :tangle no
 (map! :leader
       (:prefix "t"
        :desc "keycast" "k" #'keycast-mode))
#+end_src

** EAF (Still too slow for my taste)
#+begin_src emacs-lisp :tangle no

 (add-load-path! "~/.doomemacs.d/site-lisp/emacs-application-framework/")
 (use-package! eaf
   :config
         (require 'eaf)
         (require 'eaf-browser)
         (require 'eaf-pdf-viewer)
         (require 'eaf-org-previewer)
         (require 'eaf-terminal)
         (require 'eaf-video-player)
         (require 'eaf-markdown-previewer)
         (require 'eaf-image-viewer)
         (setq browse-url-browser-function 'eaf-open-browser)
         (setq eaf-browser-default-search-engine "startpage")
         (setq eaf-browse-blank-page-url "https://startpage.com")
         (setq eaf-browser-enable-adblocker "true")
         (setq eaf-browser-continue-where-left-off t)
         (setq eaf-browser-default-zoom "3")
         (when doom-big-font-mode)
         (setq eaf-browser-default-zoom 1.5)
         (setq eaf-mindmap-dark-mode "follow")
         (setq eaf-browser-dark-mode "force")
         (setq eaf-terminal-dark-mode "force")
         (setq eaf-pdf-dark-mode "force"))
#+end_src
